[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qcm-generator-pro"
version = "0.1.0"
description = "Local multilingual QCM generation system from PDF documents"
authors = [{name = "QCM Generator Team", email = "dev@qcmgenerator.local"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    # Core essentials only
    "fastapi>=0.104.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "uvicorn>=0.24.0,<1.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    
    # Phase 3 essentials
    "pypdf>=3.0.0,<4.0.0",
    "httpx>=0.25.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    
    # Code quality
    "ruff>=0.0.290,<1.0.0",
    "black>=23.0.0,<24.0.0",
    "mypy>=1.5.0,<2.0.0",
    
    # Pre-commit hooks
    "pre-commit>=3.4.0,<4.0.0",
]

# Extended dependencies for full features (optional)
full = [
    # LLM & AI Processing
    "langchain>=0.1.0,<1.0.0",
    "openai>=1.0.0,<2.0.0",
    
    # Vector Database
    "chromadb>=0.4.22,<1.0.0",
    
    # Additional utilities
    "python-multipart>=0.0.6,<1.0.0",
]

# UI dependencies
ui = [
    # Web Interface
    "streamlit>=1.28.0,<2.0.0",
    "stqdm>=0.0.5,<1.0.0",  # Progress bars for Streamlit
]

[project.urls]
Homepage = "https://github.com/qcm-generator/qcm-generator-pro"
Repository = "https://github.com/qcm-generator/qcm-generator-pro"
Issues = "https://github.com/qcm-generator/qcm-generator-pro/issues"

[project.scripts]
qcm-generator = "qcm_generator.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | data
  | models
)/
'''

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data",
    "models",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM118", # in-dict-keys
    "RUF100", # unused-noqa
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise from in except clauses
    "ARG001", # unused function arguments
    "F401",  # unused imports in __init__.py and test files
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "FBT", "F401", "B017"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["qcm_generator"]
force-single-line = false
length-sort = false

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "spacy.*",
    "pypdf.*",
    "pdfplumber.*",
    "streamlit.*",
    "stqdm.*",
    "langchain.*",
    "sklearn.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_model: marks tests that require LLM models",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
    "*/__main__.py",
    "*/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

# Isort Configuration (integrated with Black)
[tool.ruff.isort]
known-first-party = ["qcm_generator"]
force-single-line = false
length-sort = false