# QCM Generator Pro - CI/CD Pipeline
# Continuous Integration workflow for code quality, testing, and validation

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggers

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Black (code formatting check)
      run: black --check --diff src tests
      
    - name: Run Ruff (linting)
      run: ruff check src tests --output-format=github
      
    - name: Run MyPy (type checking)
      run: mypy src --junit-xml=mypy-results.xml
      continue-on-error: true
      
    - name: Upload MyPy results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mypy-results
        path: mypy-results.xml

  # ============================================================================
  # Security Checks
  # ============================================================================
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit[toml] safety
        
    - name: Run Bandit (security linting)
      run: bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true
      
    - name: Run Safety (dependency security check)
      run: safety check --json --output safety-results.json
      continue-on-error: true
      
    - name: Upload security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: |
          bandit-results.json
          safety-results.json

  # ============================================================================
  # Testing Matrix
  # ============================================================================
  
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Create test directories
      run: |
        mkdir -p data/{pdfs,vectorstore,database,exports,cache}
        mkdir -p logs models
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Download spaCy models (for testing)
      run: |
        python -m spacy download en_core_web_sm
        python -m spacy download fr_core_news_sm
      continue-on-error: true
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results.xml \
          -v
        
    - name: Run integration tests (if they exist)
      run: |
        if [ -d "tests/integration" ] && [ "$(ls -A tests/integration/*.py 2>/dev/null)" ]; then
          pytest tests/integration/ \
            --junit-xml=integration-test-results.xml \
            -v
        else
          echo "No integration tests found, skipping..."
        fi
      continue-on-error: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          test-results.xml
          integration-test-results.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ============================================================================
  # Build and Package
  # ============================================================================
  
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: python -m build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # ============================================================================
  # Container Build (Optional)
  # ============================================================================
  
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: false
        tags: qcm-generator-pro:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm qcm-generator-pro:${{ github.sha }} python -c "import src; print('Import successful')"

  # ============================================================================
  # Deployment (Production)
  # ============================================================================
  
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy application
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "This is a placeholder for actual deployment steps"
        # Add your deployment commands here
        
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed for commit ${{ github.sha }}"